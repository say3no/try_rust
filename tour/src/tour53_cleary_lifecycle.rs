struct Foo {
    x: i32,
}

// 引数 foo と戻り地はライフタイムを共有
fn do_something<'a>(foo: &'a Foo) -> &'a i32 {
    return &foo.x;
}

/*
明示的なライフタイム

 Rustでは、常にコードに現れるわけではありませんが、
 コンパイラはすべての変数のライフタイムを管理しており、
 参照がその所有者よりもよりも長く存在しないことを検証しようとします。

 関数は、どの引数と戻り値とがライフタイムを共有しているかを、識別のための指定子で明示的に指定できます。

 ライフタイム指定子は常に ' で始まります(例: 'a, 'b, 'c);
*/

fn main() {
    let mut foo = Foo { x: 42 };
    let x = &mut foo.x;
    *x = 13;

    // x はここでドロップされるため、不変な参照が作成可能
    let y = do_something(&foo);

    println!("{}", y);
    // y はここでドロップ
    // foo はここでドロップ
}
